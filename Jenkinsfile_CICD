<<<<<<< HEAD

=======
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
pipeline {
    agent any
    
    tools {
        nodejs 'nodejs23'
    }
<<<<<<< HEAD

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/jaiswaladi246/3-Tier-DevSecOps-Mega-Project.git'
=======
    
    // environment {
    //     SCANNER_HOME = tool 'sonar-scanner'
    // }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'deploy-to-dev-k8', url: 'https://github.com/rks007/DevSecOps-Project.git'
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
            }
        }
        
        stage('Frontend Compilation') {
            steps {
                dir('client') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        
        stage('Backend Compilation') {
            steps {
                dir('api') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        
<<<<<<< HEAD
        stage('GitLeaks Scan') {
=======
        stage('Gitleaks Scan') {
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
            steps {
                sh 'gitleaks detect --source ./client --exit-code 1'
                sh 'gitleaks detect --source ./api --exit-code 1'
            }
        }
        
<<<<<<< HEAD
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=NodeJS-Project \
                            -Dsonar.projectKey=NodeJS-Project '''
                }
            }
        }
        stage('Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
=======
        // stage('SonarQube Analysis') {
        //     steps {
        //       withSonarQubeEnv('sonar') {
        //             sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=NodeJS-Project \
        //             -Dsonar.projectKey=NodeJS-Project '''
        //       } 
        //     }
        // }
        
        // stage('Quality Gate Check') {
        //     steps {
        //         timeout(5) {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
        //         }
        //     }
        // }
        
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        
<<<<<<< HEAD
        stage('Build-Tag & Push Backend Docker Image') {
=======
        
        stage('Build-Tag & Push backend Docker Image') {
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('api') {
<<<<<<< HEAD
                            sh 'docker build -t adijaiswal/backend:latest .'
                            sh 'trivy image --format table -o backend-image-report.html adijaiswal/backend:latest '
                            sh 'docker push adijaiswal/backend:latest'
                           
=======
                            sh 'docker build -t rks007/backend:latest .'
                            sh 'trivy image --format table -o backend-image-report.html rks007/backend:latest'
                            sh 'docker push rks007/backend:latest'
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
                        }
                    }
                }
            }
<<<<<<< HEAD
        }  
            
=======
        }
        
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
        stage('Build-Tag & Push Frontend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('client') {
<<<<<<< HEAD
                            sh 'docker build -t adijaiswal/frontend:latest .'
                            sh 'trivy image --format table -o frontend-image-report.html adijaiswal/frontend:latest '
                            sh 'docker push adijaiswal/frontend:latest'
=======
                            sh 'docker build -t rks007/frontend:latest .'
                            sh 'trivy image --format table -o frontend-image-report.html rks007/frontend:latest'
                            sh 'docker push rks007/frontend:latest'
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
                        }
                    }
                }
            }
<<<<<<< HEAD
             
        }  
        
        stage('Manual Approval for Production') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Approve deployment to PRODUCTION?', ok: 'Deploy'
                }
            }
        }
        
       stage('Deployment To Prod') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-prod-token', namespace: 'prod', restrictKubeConfigAccess: false, serverUrl: 'https://AFC6FCFF5360B30D5E8950396E38A8C4.gr7.ap-south-1.eks.amazonaws.com') {
                        sh 'kubectl apply -f k8s-prod/sc.yaml'
                        sleep 20
                        sh 'kubectl apply -f k8s-prod/mysql.yaml -n prod'
                        sh 'kubectl apply -f k8s-prod/backend.yaml -n prod'
                        sh 'kubectl apply -f k8s-prod/frontend.yaml -n prod'
                        sh 'kubectl apply -f k8s-prod/ci.yaml'
                        sh 'kubectl apply -f k8s-prod/ingress.yaml -n prod'
=======
        }
        
        stage('K8-Deploy') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'mega-project', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://DA0274CD5B137B8391CD23434C08703C.gr7.eu-west-1.eks.amazonaws.com') {
                        sh 'kubectl apply -f k8s-dev/sc.yaml -n dev'
                        sh 'kubectl apply -f k8s-dev/mysql.yaml -n dev'
                        sh 'kubectl apply -f k8s-dev/backend.yaml -n dev'
                        sh 'kubectl apply -f k8s-dev/frontend.yaml -n dev'
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
                        sleep 30
                    }
                }
            }
<<<<<<< HEAD
        }
        
        stage('Verify Deployment To Prod') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-prod-token', namespace: 'prod', restrictKubeConfigAccess: false, serverUrl: 'https://AFC6FCFF5360B30D5E8950396E38A8C4.gr7.ap-south-1.eks.amazonaws.com') {
                        sh 'kubectl get pods -n prod'
                        sleep 20
                         sh 'kubectl get ingress -n prod'
                        
                    }
                }
            }
        }
            
=======
        }  
        
        stage('Verify-K8-Deploy') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'mega-project', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://DA0274CD5B137B8391CD23434C08703C.gr7.eu-west-1.eks.amazonaws.com') {
                        sh 'kubectl get pods -n dev'
                        sh 'kubectl get svc -n dev'
                    }
                }
            }
        }  
        
        
>>>>>>> b618d01754b2c63ee9ef65f3a29f2c26a274c3c4
    }
}
